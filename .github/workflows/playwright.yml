name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 0 * * *' # Run daily at midnight UTC

jobs:
  test:
    name: Run Playwright Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      - name: Install WebKit dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
          libwoff1 \
          libopus0 \
          libwebp6 \
          libwebpdemux2 \
          libenchant1c2a \
          libgudev-1.0-0 \
          libsecret-1-0 \
          libhyphen0 \
          libgdk-pixbuf2.0-0 \
          libegl1 \
          libnotify4 \
          libxslt1.1 \
          libevent-2.1-7 \
          libgles2 \
          libvpx6 \
          libxcomposite1 \
          libatk1.0-0 \
          libatk-bridge2.0-0 \
          libepoxy0 \
          libgtk-3-0 \
          libharfbuzz-icu0 \
          libgstreamer-gl1.0-0 \
          libgstreamer-plugins-bad1.0-0 \
          gstreamer1.0-plugins-good \
          gstreamer1.0-libav
      
      - name: Install Playwright browsers
        run: npx playwright install ${{ matrix.browser }}
      
      - name: Run Playwright tests
        run: |
          npx playwright test --project=${{ matrix.browser }}
          echo "TEST_EMAIL is set: ${{ env.TEST_EMAIL != '' }}"
          echo "TEST_PASSWORD is set: ${{ env.TEST_PASSWORD != '' }}"
        env:
          BASE_URL: ${{ secrets.BASE_URL || 'https://app.env9.proposify.link' }}
          TEST_EMAIL: ${{ secrets.TEST_EMAIL }}
          TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
          CI: true
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.browser }}
          path: test-results/
          retention-days: 7
  
  report:
    name: Generate Test Report
    needs: test
    if: always()
    runs-on: ubuntu-latest
    permissions:
      checks: write     # Required to create check runs
      contents: read    # Required to checkout the repository
      pull-requests: write  # Required if you want annotations on PRs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: all-test-results
      
      - name: Merge test results
        run: |
          mkdir -p merged-test-results
          find all-test-results -name "junit-results.xml" -exec cp {} merged-test-results/ \;
          npx junit-merge -d merged-test-results -o merged-test-results/junit.xml
      
      - name: Publish test report
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: merged-test-results/junit.xml
      
      - name: Upload merged test results
        uses: actions/upload-artifact@v4
        with:
          name: merged-test-results
          path: merged-test-results/
          retention-days: 14